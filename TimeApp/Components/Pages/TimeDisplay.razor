@page "/"
@using TimeApp.Components.Services
@inject TimeService TimeService
@implements IDisposable

<div class="container">
    <h1>World Clock</h1>

    <div class="utc-time">
        <h2>UTC Time</h2>
        <div class="time-display">@_utcTime.ToString("yyyy-MM-dd HH:mm:ss")</div>
    </div>

    <div class="add-city">
        <h3>Add City</h3>
        <div class="input-group">
            <input @bind="_newCityName" placeholder="City Name" />
            <input @bind="_newTimeZoneId" placeholder="Time Zone ID (e.g., America/New_York)" />
            <button @onclick="AddCity" class="btn btn-primary">Add</button>
        </div>
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
                <div class="error-message">@_errorMessage</div>
        }
    </div>

    <div class="city-times">
        <h3>City Times</h3>
        @foreach (var city in TimeService.Cities)
        {
                <div class="city-time-card">
                    <div class="city-name">@city.Name</div>
                    <div class="time-display">@TimeService.GetLocalTime(city.TimeZoneId).ToString("yyyy-MM-dd HH:mm:ss")</div>
                    <button @onclick="() => RemoveCity(city.Name)" class="btn btn-danger">Remove</button>
                </div>
        }
    </div>
</div>

<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .utc-time {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .time-display {
        font-size: 1.5em;
        font-family: monospace;
        margin: 10px 0;
    }

    .add-city {
        margin-bottom: 20px;
    }

    .input-group {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

    .input-group input {
        flex: 1;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .error-message {
        color: red;
        margin-top: 5px;
    }

    .city-times {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
    }

    .city-time-card {
        background-color: #fff;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .city-name {
        font-weight: bold;
        margin-bottom: 10px;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }
</style>

@code {
    private DateTime _utcTime;
    private string _newCityName = "";
    private string _newTimeZoneId = "";
    private string _errorMessage = "";
    private System.Threading.Timer? _timer;

    protected override void OnInitialized()
    {
        _timer = new System.Threading.Timer(_ =>
        {
            _utcTime = TimeService.GetUtcTime();
            InvokeAsync(StateHasChanged);
        }, null, 0, 1000);
    }

    private void AddCity()
    {
        if (string.IsNullOrWhiteSpace(_newCityName) || string.IsNullOrWhiteSpace(_newTimeZoneId))
        {
            _errorMessage = "Please enter both city name and time zone ID";
            return;
        }

        if (TimeService.AddCity(_newCityName, _newTimeZoneId))
        {
            _newCityName = "";
            _newTimeZoneId = "";
            _errorMessage = "";
        }
        else
        {
            _errorMessage = "Invalid time zone ID";
        }
    }

    private void RemoveCity(string cityName)
    {
        TimeService.RemoveCity(cityName);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}