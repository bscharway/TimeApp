@page "/aviation-weather"
@using System.Net.Http.Json
@using System.Text.Json
@using System.Collections.Generic
@inject HttpClient Http

<PageTitle>Aviation Weather</PageTitle>

<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-4 text-gray-800">Aviation Weather</h1>

    <div class="flex justify-between items-center mb-6">
        <div class="text-sm text-gray-600">
            Last updated: @(lastRefreshTime.ToString("yyyy-MM-dd HH:mm:ss UTC"))
        </div>
        <div class="flex items-center gap-2">
            <div class="flex items-center">
                <input type="checkbox" id="auto-refresh" @bind="autoRefreshEnabled" class="mr-2" />
                <label for="auto-refresh" class="text-sm text-gray-700">Auto-refresh every</label>
            </div>
            <select @bind="refreshInterval" class="text-sm border border-gray-300 rounded px-2 py-1">
                <option value="60000">1 minute</option>
                <option value="300000">5 minutes</option>
                <option value="600000">10 minutes</option>
                <option value="1800000">30 minutes</option>
            </select>
            <button @onclick="RefreshAll"
                class="bg-blue-500 hover:bg-blue-600 text-white text-sm px-3 py-1 rounded flex items-center">
                <span class="bi bi-arrow-clockwise mr-1" aria-hidden="true"></span> Refresh All
            </button>
        </div>
    </div>

    <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
        <h2 class="text-xl font-semibold mb-4 text-gray-700">Add Station</h2>
        <div class="flex gap-2 mb-4">
            <input @bind="newStationId" @bind:event="oninput" @onkeyup="HandleNewStationInput"
                placeholder="Enter station ID (e.g., KLAX)"
                class="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
            <button @onclick="AddStation" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg">
                Add
            </button>
        </div>
    </div>

    @if (isLoadingInitial)
    {
        <div class="flex justify-center items-center py-16">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var station in stations)
            {
                <div class="bg-white rounded-lg shadow-lg overflow-hidden">
                    <div class="bg-gray-100 px-6 py-3 flex justify-between items-center">
                        <h2 class="text-xl font-bold text-gray-800 uppercase">@station.Key</h2>
                        <div class="flex items-center">
                            @if (station.Value.IsLoading)
                            {
                                <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500 mr-2"></div>
                            }
                            <button @onclick="() => RefreshStation(station.Key)" class="text-blue-500 hover:text-blue-700 p-1"
                                title="Refresh">
                                <span class="bi bi-arrow-clockwise" aria-hidden="true"></span>
                            </button>
                            @if (!predefinedStations.Contains(station.Key.ToLower()))
                            {
                                <button @onclick="() => RemoveStation(station.Key)" class="text-red-500 hover:text-red-700 p-1 ml-1"
                                    title="Remove">
                                    <span class="bi bi-x-circle" aria-hidden="true"></span>
                                </button>
                            }
                        </div>
                    </div>

                    <div class="p-6">
                        @if (!string.IsNullOrEmpty(station.Value.Error))
                        {
                            <div class="text-red-500 mb-2">@station.Value.Error</div>
                        }
                        else
                        {
                            <div>
                                <h3 class="font-semibold text-gray-600 mb-1">METAR</h3>
                                @if (!string.IsNullOrEmpty(station.Value.Metar))
                                {
                                    <div class="bg-gray-50 p-3 rounded-lg mb-4">
                                        <pre class="whitespace-pre-wrap font-mono text-sm">@station.Value.Metar</pre>
                                    </div>
                                }
                                else
                                {
                                    <p class="text-gray-500 italic mb-4">No METAR data available.</p>
                                }

                                <h3 class="font-semibold text-gray-600 mb-1">TAF</h3>
                                @if (!string.IsNullOrEmpty(station.Value.Taf))
                                {
                                    <div class="bg-gray-50 p-3 rounded-lg">
                                        <pre class="whitespace-pre-wrap font-mono text-sm">@station.Value.Taf</pre>
                                    </div>
                                }
                                else
                                {
                                    <p class="text-gray-500 italic">No TAF data available.</p>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private Dictionary<string, StationData> stations = new();
    private string newStationId = "";
    private bool isLoadingInitial = true;
    private CancellationTokenSource? newStationCts;
    private List<string> predefinedStations = new List<string> { "ekbl", "eddk", "utsa", "zhcc", "zhec", "eblg", "egbb" };
    private bool autoRefreshEnabled = false;
    private int refreshInterval = 300000; // 5 minutes by default
    private System.Threading.Timer? refreshTimer;
    private DateTime lastRefreshTime = DateTime.UtcNow;

    protected override async Task OnInitializedAsync()
    {
        foreach (var stationId in predefinedStations)
        {
            stations[stationId.ToUpper()] = new StationData();
        }

        // Load all predefined stations in parallel
        await RefreshAll();

        // Setup refresh timer
        refreshTimer = new System.Threading.Timer(
        async _ => await InvokeAsync(RefreshAllIfEnabled),
        null,
        refreshInterval,
        refreshInterval);
    }

    private async Task RefreshAllIfEnabled()
    {
        if (autoRefreshEnabled)
        {
            await RefreshAll();
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
        newStationCts?.Cancel();
        newStationCts?.Dispose();
    }

    private async Task HandleNewStationInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newStationId))
        {
            await AddStation();
            return;
        }
    }

    private async Task AddStation()
    {
        if (string.IsNullOrWhiteSpace(newStationId))
            return;

        var stationId = newStationId.ToUpper();
        if (!stations.ContainsKey(stationId))
        {
            stations[stationId] = new StationData();
            await FetchStationData(stationId);
            newStationId = "";
        }
    }

    private void RemoveStation(string stationId)
    {
        if (!predefinedStations.Contains(stationId.ToLower()))
        {
            stations.Remove(stationId);
            StateHasChanged();
        }
    }

    private async Task RefreshStation(string stationId)
    {
        if (stations.ContainsKey(stationId))
        {
            await FetchStationData(stationId);
        }
    }

    private async Task RefreshAll()
    {
        try
        {
            // Check if we already have stations in our collection
            if (stations.Count == 0)
            {
                isLoadingInitial = true;
                foreach (var stationId in predefinedStations)
                {
                    stations[stationId.ToUpper()] = new StationData();
                }
            }

            // Refresh all stations in parallel
            await Task.WhenAll(stations.Keys.Select(async stationId =>
            {
                await FetchStationData(stationId);
            }));

            lastRefreshTime = DateTime.UtcNow;
        }
        finally
        {
            isLoadingInitial = false;
            StateHasChanged();
        }
    }

    private async Task FetchStationData(string stationId)
    {
        if (!stations.ContainsKey(stationId))
            return;

        var station = stations[stationId];
        try
        {
            station.IsLoading = true;
            station.Error = null;
            StateHasChanged();

            // Fetch both METAR and TAF in one request
            var response = await Http.GetAsync($"https://aviationweather.gov/api/data/metar?ids={stationId.ToLower()}&taf=true");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                if (!string.IsNullOrWhiteSpace(content))
                {
                    var parts = content.Split("TAF ");
                    station.Metar = parts[0].Trim();
                    if (parts.Length > 1)
                    {
                        station.Taf = "TAF " + parts[1].Trim();
                    }
                    else
                    {
                        station.Taf = null;
                    }
                }
                else
                {
                    station.Error = "No weather data available for this station.";
                }
            }
            else
            {
                station.Error = "Failed to fetch weather data. Please try again.";
            }
        }
        catch (Exception ex)
        {
            station.Error = $"Error: {ex.Message}";
        }
        finally
        {
            station.IsLoading = false;
            StateHasChanged();
        }
    }

    private class StationData
    {
        public string? Metar { get; set; }
        public string? Taf { get; set; }
        public string? Error { get; set; }
        public bool IsLoading { get; set; } = false;
    }
}