@page "/aviation-weather"
@using System.Net.Http.Json
@using System.Text.Json
@using System.Collections.Generic
@using BlazorBootstrap
@inject HttpClient Http

<PageTitle>Aviation Weather</PageTitle>

<div class="row mb-4 align-items-center">
    <div class="col-md-8">
        <h1 class="mb-0 d-flex align-items-center">
            <i class="bi bi-cloud-sun-fill me-2 text-primary" style="font-size:2rem;"></i>
            Aviation Weather
        </h1>
        <div class="text-muted mt-1">Get the latest METAR & TAF for your favorite stations.</div>
    </div>
    <div class="col-md-4 text-md-end mt-3 mt-md-0">
        <span class="me-2 text-secondary">Last updated: <span class="fw-semibold">@lastRefreshTime.ToString("yyyy-MM-dd HH:mm:ss UTC")</span></span>
        <Button Color="ButtonColor.Info" Size="ButtonSize.Small" @onclick="RefreshAll" Tooltip="Refresh all stations" aria-label="Refresh all stations">
            <i class="bi bi-arrow-clockwise"></i>
        </Button>
    </div>
</div>

<Card class="mb-4 shadow-sm">
    <CardHeader>
        <i class="bi bi-plus-circle me-2 text-success"></i>
        Add Station
    </CardHeader>
    <CardBody>
        <div class="row g-2 align-items-center">
            <div class="col-md-8">
                <InputText @bind-Value="newStationId" class="form-control" placeholder="Enter station ID (e.g., KLAX)" @onkeyup="HandleNewStationInput" />
            </div>
            <div class="col-md-4">
                <Button Color="ButtonColor.Success" class="w-100" @onclick="AddStation" Tooltip="Add station" aria-label="Add station">
                    <i class="bi bi-plus-lg"></i> Add
                </Button>
            </div>
        </div>
    </CardBody>
</Card>

<Card class="mb-4 shadow-sm">
    <CardHeader>
        <i class="bi bi-clock-history me-2 text-info"></i>
        Historical METAR (48 Hours)
    </CardHeader>
    <CardBody>
        <div class="row g-2 align-items-center">
            <div class="col-md-6">
                <InputText @bind-Value="historicalStationId" class="form-control" placeholder="Enter station ID (e.g., EKBI)" @onkeyup="HandleHistoricalStationInput" />
            </div>
            <div class="col-md-3">
                <Button Color="ButtonColor.Info" class="w-100" @onclick="FetchHistoricalData" Tooltip="Fetch 48-hour historical data" aria-label="Fetch historical data">
                    <i class="bi bi-search"></i> Get History
                </Button>
            </div>
            <div class="col-md-3">
                <Button Color="ButtonColor.Secondary" class="w-100" @onclick="ClearHistoricalData" Tooltip="Clear historical data" aria-label="Clear historical data">
                    <i class="bi bi-trash"></i> Clear
                </Button>
            </div>
        </div>
        
        @if (isLoadingHistorical)
        {
            <div class="d-flex justify-content-center align-items-center py-3">
                <Spinner Color="SpinnerColor.Info" />
                <span class="ms-2">Fetching historical data...</span>
            </div>
        }
        else if (!string.IsNullOrEmpty(historicalError))
        {
            <Alert Color="AlertColor.Danger" Dismissible="false" class="mt-3">
                <i class="bi bi-exclamation-triangle me-2"></i>@historicalError
            </Alert>
        }
        else if (!string.IsNullOrEmpty(historicalData))
        {
            <div class="mt-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h6 class="mb-0 text-info">@historicalStationId.ToUpper() - Last 48 Hours</h6>
                    <small class="text-muted">@historicalDataCount observations</small>
                </div>
                <div style="max-height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 15px; border-radius: 5px; background-color: #f8f9fa;">
                    <pre class="mb-0 text-break" style="font-size: 0.85rem; line-height: 1.4;">@historicalData</pre>
                </div>
            </div>
        }
    </CardBody>
</Card>

@if (isLoadingInitial)
{
    <div class="d-flex justify-content-center align-items-center py-5">
        <Spinner Color="SpinnerColor.Primary" Size="SpinnerSize.Large" />
    </div>
}
else
{
    <div class="row g-4">
        @foreach (var station in stations)
        {
            <div class="col-md-6 col-lg-4">
                <Card class="h-100 shadow-sm position-relative">
                    <CardHeader class="d-flex justify-content-between align-items-center bg-light">
                        <span class="fw-bold text-primary text-uppercase">@station.Key</span>
                        <span>
                            <Button Color="ButtonColor.Info" Size="ButtonSize.Small" @onclick="() => RefreshStation(station.Key)" Tooltip="Refresh" aria-label="Refresh station" class="me-1">
                                <i class="bi bi-arrow-clockwise"></i>
                            </Button>
                            @if (!predefinedStations.Contains(station.Key.ToLower()))
                            {
                                <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="() => RemoveStation(station.Key)" Tooltip="Remove" aria-label="Remove station">
                                    <i class="bi bi-x-circle"></i>
                                </Button>
                            }
                        </span>
                    </CardHeader>
                    <CardBody>
                        @if (station.Value.IsLoading)
                        {
                            <div class="d-flex justify-content-center align-items-center py-4">
                                <Spinner Color="SpinnerColor.Primary" />
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(station.Value.Error))
                        {
                            <Alert Color="AlertColor.Danger" Dismissible="false">
                                <i class="bi bi-exclamation-triangle me-2"></i>@station.Value.Error
                            </Alert>
                        }
                        else
                        {
                            <div>
                                <div class="mb-3">
                                    <div class="fw-semibold text-secondary mb-1">METAR</div>
                                    @if (!string.IsNullOrEmpty(station.Value.Metar))
                                    {
                                        <div class="mb-3" style="border: 1px solid #ccc; padding: 10px; border-radius: 5px;">
                                            <pre class="mb-0 text-break">@station.Value.Metar</pre>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted fst-italic">No METAR data available.</span>
                                    }
                                </div>
                                <div>
                                    <div class="fw-semibold text-secondary mb-1">TAF</div>
                                    @if (!string.IsNullOrEmpty(station.Value.Taf))
                                    {
                                        <div class="mb-3" style="border: 1px solid #ccc; padding: 10px; border-radius: 5px;">
                                            <pre class="mb-0 text-break">@station.Value.Taf</pre>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted fst-italic">No TAF data available.</span>
                                    }
                                </div>
                            </div>
                        }
                    </CardBody>
                </Card>
            </div>
        }
    </div>
}

@code {
    private Dictionary<string, StationData> stations = new();
    private string newStationId = "";
    private bool isLoadingInitial = true;
    private List<string> predefinedStations = new List<string> { "ekbi", "eddk", "utsa", "zhcc", "zhec", "eblg", "egbb" };
    private bool autoRefreshEnabled = false;
    private int refreshInterval = 300000; // 5 minutes by default
    private System.Threading.Timer? refreshTimer;
    private DateTime lastRefreshTime = DateTime.UtcNow;
    
    // Historical METAR variables
    private string historicalStationId = "";
    private string historicalData = "";
    private string historicalError = "";
    private bool isLoadingHistorical = false;
    private int historicalDataCount = 0;

    protected override async Task OnInitializedAsync()
    {
        foreach (var stationId in predefinedStations)
        {
            stations[stationId.ToUpper()] = new StationData();
        }

        // Load all predefined stations in parallel
        await RefreshAll();

        // Setup refresh timer
        refreshTimer = new System.Threading.Timer(
        async _ => await InvokeAsync(RefreshAllIfEnabled),
        null,
        refreshInterval,
        refreshInterval);
    }

    private async Task RefreshAllIfEnabled()
    {
        if (autoRefreshEnabled)
        {
            await RefreshAll();
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    private async Task HandleNewStationInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newStationId))
        {
            await AddStation();
            return;
        }
    }

    private async Task HandleHistoricalStationInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(historicalStationId))
        {
            await FetchHistoricalData();
            return;
        }
    }

    private async Task AddStation()
    {
        if (string.IsNullOrWhiteSpace(newStationId))
            return;

        var stationId = newStationId.ToUpper();
        if (!stations.ContainsKey(stationId))
        {
            stations[stationId] = new StationData();
            await FetchStationData(stationId);
            newStationId = "";
        }
    }

    private void RemoveStation(string stationId)
    {
        if (!predefinedStations.Contains(stationId.ToLower()))
        {
            stations.Remove(stationId);
            StateHasChanged();
        }
    }

    private async Task RefreshStation(string stationId)
    {
        if (stations.ContainsKey(stationId))
        {
            await FetchStationData(stationId);
        }
    }

    private async Task RefreshAll()
    {
        try
        {
            // Check if we already have stations in our collection
            if (stations.Count == 0)
            {
                isLoadingInitial = true;
                foreach (var stationId in predefinedStations)
                {
                    stations[stationId.ToUpper()] = new StationData();
                }
            }

            // Refresh all stations in parallel
            await Task.WhenAll(stations.Keys.Select(async stationId =>
            {
                await FetchStationData(stationId);
            }));

            lastRefreshTime = DateTime.UtcNow;
        }
        finally
        {
            isLoadingInitial = false;
            StateHasChanged();
        }
    }

    private async Task FetchStationData(string stationId)
    {
        if (!stations.ContainsKey(stationId))
            return;

        var station = stations[stationId];
        try
        {
            station.IsLoading = true;
            station.Error = null;
            StateHasChanged();

            // Fetch both METAR and TAF in one request
            var response = await Http.GetAsync($"https://aviationweather.gov/api/data/metar?ids={stationId.ToLower()}&taf=true");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                if (!string.IsNullOrWhiteSpace(content))
                {
                    var parts = content.Split("TAF ");
                    station.Metar = parts[0].Trim();
                    if (parts.Length > 1)
                    {
                        station.Taf = "TAF " + parts[1].Trim();
                    }
                    else
                    {
                        station.Taf = null;
                    }
                }
                else
                {
                    station.Error = "No weather data available for this station.";
                }
            }
            else
            {
                station.Error = "Failed to fetch weather data. Please try again.";
            }
        }
        catch (Exception ex)
        {
            station.Error = $"Error: {ex.Message}";
        }
        finally
        {
            station.IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task FetchHistoricalData()
    {
        if (string.IsNullOrWhiteSpace(historicalStationId))
            return;

        try
        {
            isLoadingHistorical = true;
            historicalError = "";
            historicalData = "";
            historicalDataCount = 0;
            StateHasChanged();

            var stationId = historicalStationId.ToLower();
            var response = await Http.GetAsync($"https://aviationweather.gov/api/data/metar?ids={stationId}&hours=48");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                if (!string.IsNullOrWhiteSpace(content))
                {
                    historicalData = content.Trim();
                    historicalDataCount = content.Split('\n').Count(line => !string.IsNullOrWhiteSpace(line));
                }
                else
                {
                    historicalError = "No historical data available for this station.";
                }
            }
            else
            {
                historicalError = "Failed to fetch historical data. Please try again.";
            }
        }
        catch (Exception ex)
        {
            historicalError = $"Error: {ex.Message}";
        }
        finally
        {
            isLoadingHistorical = false;
            StateHasChanged();
        }
    }

    private void ClearHistoricalData()
    {
        historicalStationId = "";
        historicalData = "";
        historicalError = "";
        historicalDataCount = 0;
        StateHasChanged();
    }

    private class StationData
    {
        public string? Metar { get; set; }
        public string? Taf { get; set; }
        public string? Error { get; set; }
        public bool IsLoading { get; set; } = false;
    }
}